// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/app.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppAdminAll = "/api.App/AdminAll"
const OperationAppAdminConfig = "/api.App/AdminConfig"
const OperationAppAdminConfigUpdate = "/api.App/AdminConfigUpdate"
const OperationAppAdminFee = "/api.App/AdminFee"
const OperationAppAdminLocationList = "/api.App/AdminLocationList"
const OperationAppAdminMonthRecommend = "/api.App/AdminMonthRecommend"
const OperationAppAdminRewardList = "/api.App/AdminRewardList"
const OperationAppAdminUserList = "/api.App/AdminUserList"
const OperationAppAdminUserRecommend = "/api.App/AdminUserRecommend"
const OperationAppAdminWithdraw = "/api.App/AdminWithdraw"
const OperationAppAdminWithdrawEth = "/api.App/AdminWithdrawEth"
const OperationAppAdminWithdrawList = "/api.App/AdminWithdrawList"
const OperationAppDeposit = "/api.App/Deposit"
const OperationAppFeeRewardList = "/api.App/FeeRewardList"
const OperationAppRecommendList = "/api.App/RecommendList"
const OperationAppRecommendRewardList = "/api.App/RecommendRewardList"
const OperationAppRewardList = "/api.App/RewardList"
const OperationAppUserInfo = "/api.App/UserInfo"
const OperationAppWithdraw = "/api.App/Withdraw"
const OperationAppWithdrawList = "/api.App/WithdrawList"

type AppHTTPServer interface {
	AdminAll(context.Context, *AdminAllRequest) (*AdminAllReply, error)
	AdminConfig(context.Context, *AdminConfigRequest) (*AdminConfigReply, error)
	AdminConfigUpdate(context.Context, *AdminConfigUpdateRequest) (*AdminConfigUpdateReply, error)
	AdminFee(context.Context, *AdminFeeRequest) (*AdminFeeReply, error)
	AdminLocationList(context.Context, *AdminLocationListRequest) (*AdminLocationListReply, error)
	AdminMonthRecommend(context.Context, *AdminMonthRecommendRequest) (*AdminMonthRecommendReply, error)
	AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error)
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error)
	AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error)
	AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error)
	AdminWithdrawEth(context.Context, *AdminWithdrawEthRequest) (*AdminWithdrawEthReply, error)
	AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error)
	Deposit(context.Context, *DepositRequest) (*DepositReply, error)
	FeeRewardList(context.Context, *FeeRewardListRequest) (*FeeRewardListReply, error)
	RecommendList(context.Context, *RecommendListRequest) (*RecommendListReply, error)
	RecommendRewardList(context.Context, *RecommendRewardListRequest) (*RecommendRewardListReply, error)
	RewardList(context.Context, *RewardListRequest) (*RewardListReply, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
	WithdrawList(context.Context, *WithdrawListRequest) (*WithdrawListReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/app_server/user_info", _App_UserInfo0_HTTP_Handler(srv))
	r.GET("/api/app_server/reward_list", _App_RewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/recommend_reward_list", _App_RecommendRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/fee_reward_list", _App_FeeRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/withdraw_list", _App_WithdrawList0_HTTP_Handler(srv))
	r.GET("/api/app_server/recommend_list", _App_RecommendList0_HTTP_Handler(srv))
	r.POST("/api/app_server/withdraw", _App_Withdraw0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit", _App_Deposit0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/reward_list", _App_AdminRewardList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_list", _App_AdminUserList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/location_list", _App_AdminLocationList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw_list", _App_AdminWithdrawList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw", _App_AdminWithdraw0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw_eth", _App_AdminWithdrawEth0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/fee", _App_AdminFee0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/all", _App_AdminAll0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_recommend", _App_AdminUserRecommend0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/month_recommend", _App_AdminMonthRecommend0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/config", _App_AdminConfig0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/config_update", _App_AdminConfigUpdate0_HTTP_Handler(srv))
}

func _App_UserInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfo(ctx, req.(*UserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _App_RewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RewardList(ctx, req.(*RewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_RecommendRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecommendRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRecommendRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendRewardList(ctx, req.(*RecommendRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecommendRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_FeeRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeeRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppFeeRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeeRewardList(ctx, req.(*FeeRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeeRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_WithdrawList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppWithdrawList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WithdrawList(ctx, req.(*WithdrawListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawListReply)
		return ctx.Result(200, reply)
	}
}

func _App_RecommendList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecommendListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRecommendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendList(ctx, req.(*RecommendListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecommendListReply)
		return ctx.Result(200, reply)
	}
}

func _App_Withdraw0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Withdraw(ctx, req.(*WithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _App_Deposit0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminRewardList(ctx, req.(*AdminRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUserList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserList(ctx, req.(*AdminUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUserListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminLocationList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLocationListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminLocationList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLocationList(ctx, req.(*AdminLocationListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLocationListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdrawList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdrawList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawList(ctx, req.(*AdminWithdrawListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdraw0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdraw(ctx, req.(*AdminWithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdrawEth0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawEthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdrawEth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawEth(ctx, req.(*AdminWithdrawEthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawEthReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminFee0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminFeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminFee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminFee(ctx, req.(*AdminFeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminFeeReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminAll0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminAllRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminAll(ctx, req.(*AdminAllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminAllReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUserRecommend0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUserRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUserRecommend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserRecommend(ctx, req.(*AdminUserRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUserRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminMonthRecommend0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminMonthRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminMonthRecommend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminMonthRecommend(ctx, req.(*AdminMonthRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminMonthRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminConfig0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfig(ctx, req.(*AdminConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminConfigUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminConfigUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfigUpdate(ctx, req.(*AdminConfigUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	AdminAll(ctx context.Context, req *AdminAllRequest, opts ...http.CallOption) (rsp *AdminAllReply, err error)
	AdminConfig(ctx context.Context, req *AdminConfigRequest, opts ...http.CallOption) (rsp *AdminConfigReply, err error)
	AdminConfigUpdate(ctx context.Context, req *AdminConfigUpdateRequest, opts ...http.CallOption) (rsp *AdminConfigUpdateReply, err error)
	AdminFee(ctx context.Context, req *AdminFeeRequest, opts ...http.CallOption) (rsp *AdminFeeReply, err error)
	AdminLocationList(ctx context.Context, req *AdminLocationListRequest, opts ...http.CallOption) (rsp *AdminLocationListReply, err error)
	AdminMonthRecommend(ctx context.Context, req *AdminMonthRecommendRequest, opts ...http.CallOption) (rsp *AdminMonthRecommendReply, err error)
	AdminRewardList(ctx context.Context, req *AdminRewardListRequest, opts ...http.CallOption) (rsp *AdminRewardListReply, err error)
	AdminUserList(ctx context.Context, req *AdminUserListRequest, opts ...http.CallOption) (rsp *AdminUserListReply, err error)
	AdminUserRecommend(ctx context.Context, req *AdminUserRecommendRequest, opts ...http.CallOption) (rsp *AdminUserRecommendReply, err error)
	AdminWithdraw(ctx context.Context, req *AdminWithdrawRequest, opts ...http.CallOption) (rsp *AdminWithdrawReply, err error)
	AdminWithdrawEth(ctx context.Context, req *AdminWithdrawEthRequest, opts ...http.CallOption) (rsp *AdminWithdrawEthReply, err error)
	AdminWithdrawList(ctx context.Context, req *AdminWithdrawListRequest, opts ...http.CallOption) (rsp *AdminWithdrawListReply, err error)
	Deposit(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	FeeRewardList(ctx context.Context, req *FeeRewardListRequest, opts ...http.CallOption) (rsp *FeeRewardListReply, err error)
	RecommendList(ctx context.Context, req *RecommendListRequest, opts ...http.CallOption) (rsp *RecommendListReply, err error)
	RecommendRewardList(ctx context.Context, req *RecommendRewardListRequest, opts ...http.CallOption) (rsp *RecommendRewardListReply, err error)
	RewardList(ctx context.Context, req *RewardListRequest, opts ...http.CallOption) (rsp *RewardListReply, err error)
	UserInfo(ctx context.Context, req *UserInfoRequest, opts ...http.CallOption) (rsp *UserInfoReply, err error)
	Withdraw(ctx context.Context, req *WithdrawRequest, opts ...http.CallOption) (rsp *WithdrawReply, err error)
	WithdrawList(ctx context.Context, req *WithdrawListRequest, opts ...http.CallOption) (rsp *WithdrawListReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) AdminAll(ctx context.Context, in *AdminAllRequest, opts ...http.CallOption) (*AdminAllReply, error) {
	var out AdminAllReply
	pattern := "/api/admin_dhb/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminConfig(ctx context.Context, in *AdminConfigRequest, opts ...http.CallOption) (*AdminConfigReply, error) {
	var out AdminConfigReply
	pattern := "/api/admin_dhb/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminConfigUpdate(ctx context.Context, in *AdminConfigUpdateRequest, opts ...http.CallOption) (*AdminConfigUpdateReply, error) {
	var out AdminConfigUpdateReply
	pattern := "/api/admin_dhb/config_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminConfigUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminFee(ctx context.Context, in *AdminFeeRequest, opts ...http.CallOption) (*AdminFeeReply, error) {
	var out AdminFeeReply
	pattern := "/api/admin_dhb/fee"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminFee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminLocationList(ctx context.Context, in *AdminLocationListRequest, opts ...http.CallOption) (*AdminLocationListReply, error) {
	var out AdminLocationListReply
	pattern := "/api/admin_dhb/location_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminLocationList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminMonthRecommend(ctx context.Context, in *AdminMonthRecommendRequest, opts ...http.CallOption) (*AdminMonthRecommendReply, error) {
	var out AdminMonthRecommendReply
	pattern := "/api/admin_dhb/month_recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminMonthRecommend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...http.CallOption) (*AdminRewardListReply, error) {
	var out AdminRewardListReply
	pattern := "/api/admin_dhb/reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...http.CallOption) (*AdminUserListReply, error) {
	var out AdminUserListReply
	pattern := "/api/admin_dhb/user_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...http.CallOption) (*AdminUserRecommendReply, error) {
	var out AdminUserRecommendReply
	pattern := "/api/admin_dhb/user_recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminUserRecommend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...http.CallOption) (*AdminWithdrawReply, error) {
	var out AdminWithdrawReply
	pattern := "/api/admin_dhb/withdraw"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdrawEth(ctx context.Context, in *AdminWithdrawEthRequest, opts ...http.CallOption) (*AdminWithdrawEthReply, error) {
	var out AdminWithdrawEthReply
	pattern := "/api/admin_dhb/withdraw_eth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdrawEth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...http.CallOption) (*AdminWithdrawListReply, error) {
	var out AdminWithdrawListReply
	pattern := "/api/admin_dhb/withdraw_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdrawList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Deposit(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) FeeRewardList(ctx context.Context, in *FeeRewardListRequest, opts ...http.CallOption) (*FeeRewardListReply, error) {
	var out FeeRewardListReply
	pattern := "/api/app_server/fee_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppFeeRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RecommendList(ctx context.Context, in *RecommendListRequest, opts ...http.CallOption) (*RecommendListReply, error) {
	var out RecommendListReply
	pattern := "/api/app_server/recommend_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRecommendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RecommendRewardList(ctx context.Context, in *RecommendRewardListRequest, opts ...http.CallOption) (*RecommendRewardListReply, error) {
	var out RecommendRewardListReply
	pattern := "/api/app_server/recommend_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRecommendRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RewardList(ctx context.Context, in *RewardListRequest, opts ...http.CallOption) (*RewardListReply, error) {
	var out RewardListReply
	pattern := "/api/app_server/reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "/api/app_server/user_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...http.CallOption) (*WithdrawReply, error) {
	var out WithdrawReply
	pattern := "/api/app_server/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) WithdrawList(ctx context.Context, in *WithdrawListRequest, opts ...http.CallOption) (*WithdrawListReply, error) {
	var out WithdrawListReply
	pattern := "/api/app_server/withdraw_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppWithdrawList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
